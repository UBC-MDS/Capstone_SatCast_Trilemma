---
title: "Final Report: Forecasting Bitcoin Transaction Fees"
subtitle: "Partner: Trilemma Foundation"
author: "Yuci (Jenny) Zhang, Ximin Xu, Yajing Liu, Tengwei Wang"
date: "June 25, 2025"
jupyter: python3
format:
    pdf:
        toc: true
        toc-depth: 2
        fig-pos: "H"
        tbl-pos: "H"
number-sections: true
appendix: true
bibliography: references.bib
execute:
  echo: false
  warning: false
---
```{python}
#| label: setup-analysis
#| echo: false     # hide the code
#| include: false  # hide any output
import pickle
import sys
import pandas as pd
# %run ../../scripts/analysis.py 
# The two files below are created via the analysis.py file. For reproducibility you can run this magic command above before moving forward. However, remember the SARIMA model is not in the github repo, you will have to fit a full SARIMA model before running this magic command as it is required in analysis.py. Go to README.md for instruction on how to train an SARIMA model on your local machine
with open("../../results/tables/all_forecasts.pkl", "rb") as f:
    forecasts = pickle.load(f)

metrics_df = pd.read_csv("../../results/tables/all_model_metrics.csv", index_col=0)

customloss_baselines = metrics_df.loc["custom_loss", ["HWES", "SARIMA", "Prophet", "XGBoost"]]
custom_min_baseline = customloss_baselines.min()
custom_max_baseline = customloss_baselines.max()
custom_loss_tft = metrics_df.loc["custom_loss", "TFT"]
custom_loss_improvement_pct = 100 * (custom_min_baseline - custom_loss_tft) / custom_min_baseline

rmse_tft = metrics_df.loc["rmse", "TFT"]
rmse_baselines = metrics_df.loc["rmse", ["HWES", "SARIMA", "Prophet", "XGBoost"]]
rmse_min_baseline = rmse_baselines.min()
rmse_max_baseline = rmse_baselines.max()
rmse_improvement_pct = 100 * (rmse_min_baseline - rmse_tft) / rmse_min_baseline

mape_tft = metrics_df.loc["mape", "TFT"]
mape_baselines = metrics_df.loc["mape", ["HWES", "SARIMA", "Prophet", "XGBoost"]]
mape_min_baseline = mape_baselines.min()
mape_max_baseline = mape_baselines.max()
mape_improvement_pct = 100 * (mape_min_baseline - mape_tft) / mape_min_baseline

min_improvement_pct = min(custom_loss_improvement_pct, rmse_improvement_pct, mape_improvement_pct)
max_improvement_pct = max(custom_loss_improvement_pct, rmse_improvement_pct, mape_improvement_pct)
```

\newpage
# Executive Summary  

{{< include _summary.qmd >}}

# Introduction
[^note]: Refer to [Appendix A](#sec-terminology) for formal definitions of Bitcoin-related terms.

{{< include _background.qmd >}}
{{< include _objective.qmd >}}

\newpage
# Data Science Techniques {#sec-techniques}

{{< include _data.qmd >}}
{{< include _preprocessing.qmd >}}
{{< include _models.qmd >}}
{{< include _metrics.qmd >}}

# Data Product and Results {#sec-product}

{{< include _product.qmd >}}

# Conclusion and Recommendations {#sec-conclusion}

{{< include _conclusion.qmd >}}

# Appendix{.appendix #sec-appendix}

{{< include appendix.qmd >}}

# References